package com.automate.server.messaging.handlers;

import com.automate.protocol.Message;
import com.automate.protocol.client.messages.ClientAuthenticationMessage;
import com.automate.protocol.server.ServerProtocolParameters;
import com.automate.protocol.server.messages.ServerAuthenticationMessage;
import com.automate.server.security.ISecurityManager;

/**
 * Delegate class that handles authentication messages from clients.
 * @author jamie.bertram
 *
 */
public class AuthenticationMessageHandler implements IMessageHandler<ClientAuthenticationMessage, AuthenticationMessageHandlerParams> {

	/**
	 * The security manager that manages client and node sessions.
	 */
	private ISecurityManager securityManager;
	
	/**
	 * Creates a new {@link AuthenticationMessageHandler} that communicates with the specified {@link ISecurityManager}.
	 * @param securityManager the {@link ISecurityManager} that manages session information.
	 * @throws NullPointerException if <code>securityManager</code> is null.
	 */
	public AuthenticationMessageHandler(ISecurityManager securityManager) {
		if(securityManager == null) {
			throw new NullPointerException("Authentication message handler requires an instance of ISecurityManager.");
		}
		this.securityManager = securityManager;
	}

	/**
	 * Handles an authentication message from a client.
	 * 
	 * @return a {@link ServerAuthenticationMessage} with responseCode == 200, response == "OK", 
	 * sessionKey == a new session key generated by the security manager if the security manager 
	 * authenticates the message. <br/>
	 * a {@link ServerAuthenticationMessage} with responseCode == 400, response == "DENIED", 
	 * sessionKey == "" if the security manager rejects the message. <br/>
	 * a {@link ServerAuthenticationMessage} with responseCode == 500, response == "INTERNAL SERVER ERROR", 
	 * sessionKey == "" if the security manager throws an exception while authenticating.
	 */
	@Override
	public Message<ServerProtocolParameters> handleMessage(int majorVersion, int minorVersion, boolean sessionValid, 
			ClientAuthenticationMessage message, AuthenticationMessageHandlerParams params) {
		if(message == null) {
			throw new NullPointerException("message was null.");
		} else if(params == null) {
			throw new NullPointerException("params was null.");
		}
		try {
			System.out.println("Handling Authentication message " + message.username + " " + message.password);
			String sessionKey = securityManager.authenticateClient(message.username, 
					message.password, message.getParameters().sessionKey, params.clientSocket);
			if(sessionKey != null && !sessionKey.isEmpty()) {
				System.out.println("Authentication successful!");
				return new ServerAuthenticationMessage(new ServerProtocolParameters(majorVersion, minorVersion, sessionValid, sessionKey), 
						message.username, 200, "OK", sessionKey);
			} else {
				System.out.println("Authentication unsuccessful!");
				return new ServerAuthenticationMessage(new ServerProtocolParameters(majorVersion, minorVersion, sessionValid, ""), 
						message.username, 400, "DENIED", "");
			}
		} catch(Throwable t) {
			return new ServerAuthenticationMessage(new ServerProtocolParameters(majorVersion, minorVersion, sessionValid, ""), 
					message.username, 500, "INTERNAL SERVER ERROR", "");
		}
	}
	
}
